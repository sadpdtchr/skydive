// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package blockdev

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB706cdfeDecodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(in *jlexer.Lexer, out *BlockMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ReadsPerSec":
			out.ReadsPerSec = int64(in.Int64())
		case "WritesPerSec":
			out.WritesPerSec = int64(in.Int64())
		case "ReadsKBPerSec":
			out.ReadsKBPerSec = int64(in.Int64())
		case "WritesKBPerSec":
			out.WritesKBPerSec = int64(in.Int64())
		case "ReadsMergedPerSec":
			out.ReadsMergedPerSec = int64(in.Int64())
		case "WritesMergedPerSec":
			out.WritesMergedPerSec = int64(in.Int64())
		case "ReadsMerged":
			out.ReadsMerged = int64(in.Int64())
		case "WritesMerged":
			out.WritesMerged = int64(in.Int64())
		case "ReadServiceTime":
			out.ReadServiceTime = int64(in.Int64())
		case "WriteServiceTime":
			out.WriteServiceTime = int64(in.Int64())
		case "AverageQueueSize":
			out.AverageQueueSize = int64(in.Int64())
		case "AverageReadSize":
			out.AverageReadSize = int64(in.Int64())
		case "AverageWriteSize":
			out.AverageWriteSize = int64(in.Int64())
		case "ServiceTime":
			out.ServiceTime = int64(in.Int64())
		case "Utilization":
			out.Utilization = int64(in.Int64())
		case "Start":
			out.Start = int64(in.Int64())
		case "Last":
			out.Last = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB706cdfeEncodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(out *jwriter.Writer, in BlockMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReadsPerSec != 0 {
		const prefix string = ",\"ReadsPerSec\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ReadsPerSec))
	}
	if in.WritesPerSec != 0 {
		const prefix string = ",\"WritesPerSec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WritesPerSec))
	}
	if in.ReadsKBPerSec != 0 {
		const prefix string = ",\"ReadsKBPerSec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReadsKBPerSec))
	}
	if in.WritesKBPerSec != 0 {
		const prefix string = ",\"WritesKBPerSec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WritesKBPerSec))
	}
	if in.ReadsMergedPerSec != 0 {
		const prefix string = ",\"ReadsMergedPerSec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReadsMergedPerSec))
	}
	if in.WritesMergedPerSec != 0 {
		const prefix string = ",\"WritesMergedPerSec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WritesMergedPerSec))
	}
	if in.ReadsMerged != 0 {
		const prefix string = ",\"ReadsMerged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReadsMerged))
	}
	if in.WritesMerged != 0 {
		const prefix string = ",\"WritesMerged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WritesMerged))
	}
	if in.ReadServiceTime != 0 {
		const prefix string = ",\"ReadServiceTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ReadServiceTime))
	}
	if in.WriteServiceTime != 0 {
		const prefix string = ",\"WriteServiceTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.WriteServiceTime))
	}
	if in.AverageQueueSize != 0 {
		const prefix string = ",\"AverageQueueSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AverageQueueSize))
	}
	if in.AverageReadSize != 0 {
		const prefix string = ",\"AverageReadSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AverageReadSize))
	}
	if in.AverageWriteSize != 0 {
		const prefix string = ",\"AverageWriteSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AverageWriteSize))
	}
	if in.ServiceTime != 0 {
		const prefix string = ",\"ServiceTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ServiceTime))
	}
	if in.Utilization != 0 {
		const prefix string = ",\"Utilization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Utilization))
	}
	if in.Start != 0 {
		const prefix string = ",\"Start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Start))
	}
	if in.Last != 0 {
		const prefix string = ",\"Last\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Last))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB706cdfeEncodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB706cdfeEncodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB706cdfeDecodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB706cdfeDecodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(l, v)
}
