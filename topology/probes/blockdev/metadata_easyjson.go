// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package blockdev

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Index":
			out.Index = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Alignment":
			out.Alignment = int64(in.Int64())
		case "DiscAln":
			out.DiscAln = int64(in.Int64())
		case "DiscGran":
			out.DiscGran = string(in.String())
		case "DiscMax":
			out.DiscMax = string(in.String())
		case "DiscZero":
			out.DiscZero = bool(in.Bool())
		case "Fsavail":
			out.Fsavail = string(in.String())
		case "Fssize":
			out.Fssize = string(in.String())
		case "Fstype":
			out.Fstype = string(in.String())
		case "FsusePercent":
			out.FsusePercent = string(in.String())
		case "Fsused":
			out.Fsused = string(in.String())
		case "Group":
			out.Group = string(in.String())
		case "Hctl":
			out.Hctl = string(in.String())
		case "Hotplug":
			out.Hotplug = bool(in.Bool())
		case "Kname":
			out.Kname = string(in.String())
		case "Label":
			out.Label = string(in.String())
		case "LogSec":
			out.LogSec = int64(in.Int64())
		case "MajMin":
			out.MajMin = string(in.String())
		case "MinIo":
			out.MinIo = int64(in.Int64())
		case "Mode":
			out.Mode = string(in.String())
		case "Model":
			out.Model = string(in.String())
		case "Mountpoint":
			out.Mountpoint = string(in.String())
		case "OptIo":
			out.OptIo = int64(in.Int64())
		case "Owner":
			out.Owner = string(in.String())
		case "Partflags":
			out.Partflags = string(in.String())
		case "Partlabel":
			out.Partlabel = string(in.String())
		case "Parttype":
			out.Parttype = string(in.String())
		case "Partuuid":
			out.Partuuid = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "PhySec":
			out.PhySec = int64(in.Int64())
		case "Pkname":
			out.Pkname = string(in.String())
		case "Pttype":
			out.Pttype = string(in.String())
		case "Ptuuid":
			out.Ptuuid = string(in.String())
		case "Ra":
			out.Ra = int64(in.Int64())
		case "Rand":
			out.Rand = bool(in.Bool())
		case "Rev":
			out.Rev = string(in.String())
		case "Rm":
			out.Rm = bool(in.Bool())
		case "Ro":
			out.Ro = bool(in.Bool())
		case "Rota":
			out.Rota = bool(in.Bool())
		case "RqSize":
			out.RqSize = int64(in.Int64())
		case "Sched":
			out.Sched = string(in.String())
		case "Serial":
			out.Serial = string(in.String())
		case "Size":
			out.Size = string(in.String())
		case "State":
			out.State = string(in.String())
		case "Subsystems":
			out.Subsystems = string(in.String())
		case "Tran":
			out.Tran = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "UUID":
			out.UUID = string(in.String())
		case "Vendor":
			out.Vendor = string(in.String())
		case "Wsame":
			out.Wsame = string(in.String())
		case "WWN":
			out.WWN = string(in.String())
		case "Labels":
			(out.Labels).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Index\":"
		out.RawString(prefix[1:])
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Alignment\":"
		out.RawString(prefix)
		out.Int64(int64(in.Alignment))
	}
	{
		const prefix string = ",\"DiscAln\":"
		out.RawString(prefix)
		out.Int64(int64(in.DiscAln))
	}
	{
		const prefix string = ",\"DiscGran\":"
		out.RawString(prefix)
		out.String(string(in.DiscGran))
	}
	{
		const prefix string = ",\"DiscMax\":"
		out.RawString(prefix)
		out.String(string(in.DiscMax))
	}
	{
		const prefix string = ",\"DiscZero\":"
		out.RawString(prefix)
		out.Bool(bool(in.DiscZero))
	}
	{
		const prefix string = ",\"Fsavail\":"
		out.RawString(prefix)
		out.String(string(in.Fsavail))
	}
	{
		const prefix string = ",\"Fssize\":"
		out.RawString(prefix)
		out.String(string(in.Fssize))
	}
	{
		const prefix string = ",\"Fstype\":"
		out.RawString(prefix)
		out.String(string(in.Fstype))
	}
	{
		const prefix string = ",\"FsusePercent\":"
		out.RawString(prefix)
		out.String(string(in.FsusePercent))
	}
	{
		const prefix string = ",\"Fsused\":"
		out.RawString(prefix)
		out.String(string(in.Fsused))
	}
	{
		const prefix string = ",\"Group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"Hctl\":"
		out.RawString(prefix)
		out.String(string(in.Hctl))
	}
	{
		const prefix string = ",\"Hotplug\":"
		out.RawString(prefix)
		out.Bool(bool(in.Hotplug))
	}
	{
		const prefix string = ",\"Kname\":"
		out.RawString(prefix)
		out.String(string(in.Kname))
	}
	{
		const prefix string = ",\"Label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"LogSec\":"
		out.RawString(prefix)
		out.Int64(int64(in.LogSec))
	}
	{
		const prefix string = ",\"MajMin\":"
		out.RawString(prefix)
		out.String(string(in.MajMin))
	}
	{
		const prefix string = ",\"MinIo\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinIo))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"Model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"Mountpoint\":"
		out.RawString(prefix)
		out.String(string(in.Mountpoint))
	}
	{
		const prefix string = ",\"OptIo\":"
		out.RawString(prefix)
		out.Int64(int64(in.OptIo))
	}
	{
		const prefix string = ",\"Owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"Partflags\":"
		out.RawString(prefix)
		out.String(string(in.Partflags))
	}
	{
		const prefix string = ",\"Partlabel\":"
		out.RawString(prefix)
		out.String(string(in.Partlabel))
	}
	{
		const prefix string = ",\"Parttype\":"
		out.RawString(prefix)
		out.String(string(in.Parttype))
	}
	{
		const prefix string = ",\"Partuuid\":"
		out.RawString(prefix)
		out.String(string(in.Partuuid))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"PhySec\":"
		out.RawString(prefix)
		out.Int64(int64(in.PhySec))
	}
	{
		const prefix string = ",\"Pkname\":"
		out.RawString(prefix)
		out.String(string(in.Pkname))
	}
	{
		const prefix string = ",\"Pttype\":"
		out.RawString(prefix)
		out.String(string(in.Pttype))
	}
	{
		const prefix string = ",\"Ptuuid\":"
		out.RawString(prefix)
		out.String(string(in.Ptuuid))
	}
	{
		const prefix string = ",\"Ra\":"
		out.RawString(prefix)
		out.Int64(int64(in.Ra))
	}
	{
		const prefix string = ",\"Rand\":"
		out.RawString(prefix)
		out.Bool(bool(in.Rand))
	}
	{
		const prefix string = ",\"Rev\":"
		out.RawString(prefix)
		out.String(string(in.Rev))
	}
	{
		const prefix string = ",\"Rm\":"
		out.RawString(prefix)
		out.Bool(bool(in.Rm))
	}
	{
		const prefix string = ",\"Ro\":"
		out.RawString(prefix)
		out.Bool(bool(in.Ro))
	}
	{
		const prefix string = ",\"Rota\":"
		out.RawString(prefix)
		out.Bool(bool(in.Rota))
	}
	{
		const prefix string = ",\"RqSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.RqSize))
	}
	{
		const prefix string = ",\"Sched\":"
		out.RawString(prefix)
		out.String(string(in.Sched))
	}
	{
		const prefix string = ",\"Serial\":"
		out.RawString(prefix)
		out.String(string(in.Serial))
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"State\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"Subsystems\":"
		out.RawString(prefix)
		out.String(string(in.Subsystems))
	}
	{
		const prefix string = ",\"Tran\":"
		out.RawString(prefix)
		out.String(string(in.Tran))
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"Vendor\":"
		out.RawString(prefix)
		out.String(string(in.Vendor))
	}
	{
		const prefix string = ",\"Wsame\":"
		out.RawString(prefix)
		out.String(string(in.Wsame))
	}
	{
		const prefix string = ",\"WWN\":"
		out.RawString(prefix)
		out.String(string(in.WWN))
	}
	{
		const prefix string = ",\"Labels\":"
		out.RawString(prefix)
		(in.Labels).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBa0ee0e3EncodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBa0ee0e3DecodeGithubComSkydiveProjectSkydiveTopologyProbesBlockdev(l, v)
}
